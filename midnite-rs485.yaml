# midnite classic modbus reference commands https://github.com/clowrey/ESPhome-Midnite-Classic/blob/main/classic_modbus-register-map_Rev-B-May-23-2013.pdf
# Midnite shows address with extra 1 added - so subtract one? I believe will test
# documentation https://github.com/clowrey/ESPhome-Midnite-Classic

esphome:
  name: hydro
  friendly_name: Hydro

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: !secret wifi_ssid_3
  password: !secret wifi_password_3

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Midnite-Rs485 Fallback Hotspot"
    password: ""

captive_portal:
    
time:
  - platform: homeassistant
    id: homeassistant_time
     
uart:
  id: mod_bus
  tx_pin: GPIO5
  rx_pin: GPIO6
  baud_rate: 19200
  stop_bits: 1
  rx_buffer_size: 384
 
modbus:
  id: midnite_modbus
 
modbus_controller:
  - id: midnite
    address: 10
    modbus_id: midnite_modbus
    setup_priority: -10
    update_interval: "30s"
    command_throttle: "3000ms" #midnite does not like too many requests

#                                               SENSORS                                               #
#######################################################################################################
#ChargeStage= [4120]MSB
#Lifetime kW-Hours= (([4127] << 16) + [4126]) kWh
#Infoflags = (([4131] << 16) + [4130])
#FloatTimeToday= ([4138]) s
#KwhToday=    ([4118]) kWh
#Tbatt=   ([4132] /10) degC
#Tfet=   ([4133] /10) degC
#Vbatt= ([4115] /10) V
#Ibatt= ([4117] /10) A
#Vpv=    ([4116] /10) V
#Ipv=    ([4121] /10) A
#Watts= ([4119]) W
############################################### BATTERY ###############################################

#if modbus request addresses are sequential the ESPhome modbus platform will generate one combined request for the data which is more efficient 
# doesnt always matter but may with some devices that have limited resources to respond

sensor:
  - platform: modbus_controller            
    modbus_controller_id: midnite
    name: "Battery Voltage"
    register_type: holding
    address: 4114                    # Battery Voltage
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.1
    value_type: U_WORD

  - platform: modbus_controller            
    modbus_controller_id: midnite
    name: "Input Voltage"
    register_type: holding
    address: 4115                     # PV Voltage
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.1
    value_type: U_WORD

  - platform: modbus_controller          
    name: "Battery Current"
    id: inverter_esphome_pv3_current
    register_type: holding
    address: 4116                      # Battery Current
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    filters:
      - multiply: 0.1
    value_type: U_WORD

  - platform: modbus_controller           
    name: "Midnite Daily Energy"
    id: inverter_esphome_day_pv_energy
    register_type: holding 
    address: 4117                     # Daily Energy
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.1
    value_type: U_WORD

  - platform: modbus_controller            
    modbus_controller_id: midnite
    name: "Power Output"
    id: midnite_power
    register_type: holding
    address: 4118                     # Watts
    unit_of_measurement: "W"
    device_class: Power
    state_class: measurement
    accuracy_decimals: 0
    value_type: U_WORD

  - platform: modbus_controller            
    modbus_controller_id: midnite
    name: "Clipper Command Volts"
    register_type: holding
    address: 4201
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.1
    value_type: U_WORD

  - platform: total_daily_energy
    name: 'ESPhome Daily Energy'
    power_id: midnite_power
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

text_sensor:
  - platform: modbus_controller
    name: "Battery Charge State"
    register_type: holding
    raw_encode: NONE # 2 byte hex string
    address: 4119
    register_count: 2
    #force_new_range: true
    lambda: |- 
      uint8_t value = x[0];
      switch (value) {
        case 0: return std::string("Resting");
        case 3: return std::string("Absorb");
        case 4: return std::string("Bulk MPPT");
        case 5: return std::string("Float");
        case 6: return std::string("Float MPPT");
        case 7: return std::string("Equalize");
        case 10: return std::string("Hyper VOC");
        case 18: return std::string("Equalize MPPT");
        default: return std::string("unknown");
      }
      
# return to_string(x); // for debugging
# default: return to_string(value);  // for debugging

  - platform: modbus_controller
    name: "Classic State"
    register_type: holding
    raw_encode: NONE
    address: 4119
    register_count: 2
    lambda: |- 
      uint8_t value = x[1];
      switch (value) {
        case 0: return std::string("Resting");
        case 1: return std::string("Waking/Starting");
        case 2: return std::string("Waking/Starting");
        case 3: return std::string("MPPT / Regulating V");
        case 4: return std::string("MPPT / Regulating V");
        case 6: return std::string("MPPT / Regulating V");
        default: return std::string("unknown");
      }